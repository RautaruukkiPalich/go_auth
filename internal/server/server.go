package server

import (
	"net/http"

	"github.com/gorilla/mux"
	"github.com/rautaruukkipalich/go_auth/internal/store"
	"github.com/sirupsen/logrus"

	_ "github.com/rautaruukkipalich/go_auth/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/swaggo/http-swagger/v2"
)

type Server struct {
	router *mux.Router
	logger *logrus.Logger
	store  store.Store
}

func newServer(store store.Store, logLevel string) *Server {
	s := &Server{
		router: mux.NewRouter(),
		logger: logrus.New(),
		store:  store,
	}

	s.configureRouter()
	s.configureLogger(logLevel)

	return s
}

func (s *Server) configureLogger(lvl string) {
	level, err := logrus.ParseLevel(lvl)
	if err != nil {
		panic(err)
	}
	s.logger.Level = level
}

func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	s.router.ServeHTTP(w, r)
}

func (s *Server) configureRouter() {

	s.router.PathPrefix(
		"/swagger/",
	).HandlerFunc(httpSwagger.WrapHandler)

	s.router.HandleFunc(
		"/register", s.Register(),
	).Methods("POST")

	s.router.HandleFunc(
		"/auth", s.Auth(),
	).Methods("POST")

	s.router.Handle(
		"/me", s.AuthMiddleware(http.Handler(s.Me())),
	).Methods("GET")

	s.router.Handle(
		"/me", s.AuthMiddleware(http.Handler(s.EditUsername())),
	).Methods("PATCH")

	s.router.Handle(
		"/me/password",	s.AuthMiddleware(http.Handler(s.EditPassword())),
	).Methods("PATCH")
}
